{"name":"Felipe Fialho Coding Style","tagline":"My rules coding for HTML, CSS and JavaScript development ","body":"My Coding Style\r\n============\r\n\r\n> \"Every line of code should appear to be written by a single person, no matter the number of contributors.\" - Chinese Proverb\r\n\r\nThe following document describes the rules of writing in development languages that I use: HTML, CSS and Javascript.\r\n\r\nThe idea of this repository is to have a place for myself and other developers who participate in my projects able to inform the coding standards used.\r\n\r\nAs this is a new document, some rules may not have been applied in old projects.\r\n\r\nThis is a live document and changes can occur at any time.\r\n\r\n## Summary\r\n \r\n1. [Commits] (#commits) \r\n1. [HTML] (#html) \r\n1. [CSS] (#css) \r\n1. [Javascript] (#js) \r\n1. [License](#license)\r\n1. [References](#references)\r\n \r\n<a name=\"commits\"></a>\r\n## 1. Commits\r\n\r\nFor facilitate the contribution of any people in projects, all commit messages, pull request title or issues discussion must be in **English**.\r\n\r\nBefore commit adjusts in project, check if exists an open issue and make references for this issue using '#' in your commit message.\r\n\r\n```javascript\r\n// Good\r\ngit commit -m \"Add placeholder in input #10\"\r\n\r\n// Bad\r\ngit commit -m \"Add placeholder in input\"\r\n```\r\n\r\n<a name=\"html\"></a>\r\n## 2. HTML\r\n\r\nThe main influence for the HTML rules is the [Code Guide by @mdo](https://github.com/mdo/code-guide).\r\n\r\n### HTML Summary\r\n\r\n1. [HTML Syntax] (#html-syntax) \r\n1. [HTML Comments] (#html-comments)\r\n1. [Character Encoding] (#html-encoding)\r\n1. [Attribute Order] (#html-attribute-order)\r\n1. [HTML Performance] (#html-performance) \r\n1. [HTML Base Code] (#html-base)\r\n\r\n<a name=\"html-syntax\"></a>\r\n### 2.1. HTML Syntax\r\n\r\nUse soft tabs with two spaces. You can configure your editor for this. \r\n\r\n```html\r\n<!-- Good -->\r\n<nav class=\"nav\">\r\n  <ul class=\"nav-menu\">\r\n    <li class=\"nav-item\">\r\n      <a class=\"nav-link\">\r\n\r\n<!-- Bad-->\r\n<nav class=\"nav\">\r\n      <ul class=\"nav-menu\">\r\n            <li class=\"nav-item\">\r\n                  <a class=\"nav-link\">\r\n```\r\n\r\nAlways use double quotes.\r\n\r\n```html\r\n<!-- Good -->\r\n<div class=\"main\">\r\n\r\n<!-- Bad-->\r\n<div class='main'>\r\n```\r\n  \r\nDon't include a `/` in self-closing elements.\r\n\r\n```html\r\n<!-- Good -->\r\n<hr>\r\n\r\n<!-- Bad-->\r\n<hr />\r\n```\r\n\r\nSeparate block element by a blank line and agroup the inners block elements.\r\n\r\n```html\r\n<!-- Good -->\r\n<ul class=\"nav-tabs\">\r\n  <li>...</li>\r\n  <li>...</li>\r\n  <li>...</li>\r\n  <li>...</li>\r\n</ul> \r\n\r\n<div class=\"tab-content\">\r\n  ...\r\n</div>  \r\n\r\n<!-- Bad-->\r\n<ul class=\"nav-tabs\">\r\n\r\n  <li>...</li>\r\n  \r\n  <li>...</li>\r\n  \r\n  <li>...</li>\r\n  \r\n  <li>...</li>\r\n  \r\n</ul> \r\n<div class=\"tab-content\">\r\n  ...\r\n</div>  \r\n```\r\n  \r\n<a name=\"html-comments\"></a>\r\n### 2.2. HTML Comments\r\n\r\nFollow this rule to add comments in HTML.\r\n\r\n```html\r\n<!-- This is a good example -->\r\n<!-- /Closing a good example -->\r\n```\r\n\r\n<a name=\"html-encoding\"></a>\r\n### 2.3. Character Encoding\r\n\r\nAlways use UTF-8 for character encoding.\r\n\r\n```html\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n</head>\r\n```\r\n\r\n<a name=\"html-attribute-order\"></a>\r\n### 2.4. HTML Attribute Order\r\n\r\nHTML attributes should be in this order for facilitate the reading.\r\n\r\n1. `class`\r\n1. `id`, `name`\r\n1. `data-*`\r\n1. `src`, `for`, `type`, `href`\r\n1. `title`, `alt`\r\n1. `aria-*`, `role`\r\n\r\n```html\r\n<a class=\"...\" id=\"...\" data-modal=\"toggle\" href=\"#\"> \r\n\r\n<input class=\"form-control\" type=\"text\">\r\n\r\n<img class=\"img-rounded\" src=\"...\" alt=\"...\">\r\n```\r\n\r\n<a name=\"html-performance\"></a>\r\n### 2.5. HTML Performance\r\n\r\nNo need to specify a type when including CSS and JavaScript files as `text/css` and `text/javascript`.\r\n\r\n```html\r\n<!-- Good -->\r\n<link rel=\"stylesheet\" href=\"assets/css/style.css\" />\r\n<script src=\"scripts.min.js\"></script> \r\n\r\n<!-- Bad -->\r\n<script src=\"scripts.min.js\"></script>\r\n</head>\r\n<body>\r\n```\r\n\r\nFor a better performance, all javascripts files must be at the end of the code. Before closing the `<body>`.\r\n\r\n```html\r\n<!-- Good -->\r\n<script src=\"scripts.min.js\"></script>\r\n</body>\r\n\r\n<!-- Bad -->\r\n<script src=\"scripts.min.js\"></script>\r\n</head>\r\n<body>\r\n```\r\n\r\nAlways minify the code in projects only in HTML. Task builders like [Grunt](http://gruntjs.com/) leaves this easier.\r\n\r\n```html\r\n<!-- Good -->\r\n<html><head>...</head><body><div class=\"container\">...</div></body></html>\r\n\r\n<!-- Bad -->\r\n<html>\r\n  <head>\r\n    ...\r\n  </head>\r\n  <body>\r\n    <div class=\"container\">\r\n      ...\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\n<a name=\"html-base\"></a>\r\n### 2.6. HTML Base Code\r\n\r\nThe following code is a HTML base for faster start the projects.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n<meta name=\"format-detection\" content=\"telephone=no\">\r\n<meta name=\"viewport\" content=\"width=device-width\">\r\n \r\n<link rel=\"shortcut icon\" href=\"assets/img/ico/favicon.ico\" />\r\n\r\n<!-- SVG Logo --> \r\n<link rel=\"logo\" type=\"image/svg\" href=\"../assets/img/logo/logo.svg\" />\r\n \r\n<title></title>\r\n\r\n<link rel=\"stylesheet\" href=\"assets/css/style.css\" />\r\n \r\n</head>\r\n<body>\r\n\r\n<!-- Scripts -->\r\n<script src=\"assets/js/scripts.min.js\"></script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\nFor give support a olds Internet Explorer... \r\n\r\n```html\r\n<!DOCTYPE html>\r\n<!--[if IE]><![endif]-->\r\n<!--[if IE 7 ]> <html lang=\"en\" class=\"ie7\">    <![endif]-->\r\n<!--[if IE 8 ]>    <html lang=\"en\" class=\"ie8\">    <![endif]-->\r\n<!--[if IE 9 ]>    <html lang=\"en\" class=\"ie9\">    <![endif]-->\r\n<!--[if (gt IE 9)|!(IE)]><!--><html lang=\"en\"><!--<![endif]-->\r\n<head>\r\n...\r\n```\r\n\r\n<a name=\"css\"></a>\r\n## 3. CSS\r\n \r\nThe main influences for the CSS rules are [Code Guide by @mdo](https://github.com/mdo/code-guide) and [idiomatic CSS](https://github.com/necolas/idiomatic-css/).\r\n\r\n### CSS Summary\r\n\r\n1. [CSS Syntax] (#css-syntax) \r\n1. [CSS Declaration Order] (#css-order)\r\n1. [CSS Class Name] (#css-class-name) \r\n1. [CSS Performance] (#css-performance)\r\n1. [Mobile First and Media Queries] (#mobile-first-and-media-queries)\r\n1. [Pre-Processors] (#css-pre-processors)\r\n1. [CSS Comments] (#css-comments) \r\n\r\n<a name=\"css-syntax\"></a>\r\n### 3.1. CSS Syntax\r\n\r\nUse soft tabs with two spaces. You can configure your editor for this. \r\n\r\n```css\r\n/* Good */\r\n.nav-item {\r\n  display: inline-block;\r\n  margin: 0 5px;\r\n}\r\n\r\n/* Bad */\r\n.nav-item {\r\n    display: inline-block;\r\n    margin: 0 5px;\r\n}\r\n```\r\n\r\nAlways use double quotes.\r\n\r\n```css\r\n/* Good */\r\n[type=\"text\"]\r\n[class^=\"...\"]\r\n\r\n.nav-item:after {\r\n  content: \"\";\r\n}\r\n\r\n/* Bad */\r\n[type='text']\r\n[class^='...']\r\n\r\n.nav-item:after {\r\n  content: '';\r\n}\r\n```\r\n\r\nInclude a single space before the opening brace of a ruleset.\r\n\r\n```css\r\n/* Good */\r\n.header {\r\n  ...\r\n}\r\n\r\n/* Bad */\r\n.header{\r\n  ...\r\n}\r\n```\r\n\r\nInclude a single space after the colon of a declaration.\r\n\r\n```css\r\n/* Good */\r\n.header {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* Bad */\r\n.header{\r\n  margin-bottom:20px;\r\n}\r\n```\r\n\r\nInclude a semi-colon at the end of the last declaration in a declaration block.\r\n\r\n```css\r\n/* Good */\r\n.header {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* Bad */\r\n.header{\r\n  margin-bottom:20px\r\n}\r\n```\r\n\r\nKeep one declaration per line.\r\n\r\n```css\r\n/* Good */\r\n.selector-1,\r\n.selector-2,\r\n.selector-3 {\r\n  ...\r\n}\r\n\r\n/* Bad */\r\n.selector-1, .selector-2, .selector-3 {\r\n  ...\r\n}\r\n```\r\n\r\nSingle declarations should remain in one line.\r\n\r\n```css\r\n/* Good */\r\n.selector-1 { width: 50%; }\r\n\r\n/* Bad */\r\n.selector-1 {\r\n  width: 50%;\r\n}\r\n```\r\n\r\nSeparate each ruleset by a blank line.\r\n\r\n```css\r\n/* Good */\r\n.selector-1 {\r\n  ...\r\n}\r\n\r\n.selector-2 {\r\n  ...\r\n}\r\n\r\n/* Bad */\r\n.selector-1 {\r\n  ...\r\n}\r\n.selector-2 {\r\n  ...\r\n}\r\n```\r\n\r\nUse lowercase and shorthand hex values and avoid specifying units is zero-values.\r\n\r\n```css\r\n/* Good */\r\n.selector-1 {\r\n  color: #aaa;\r\n  margin: 0;\r\n}\r\n \r\n/* Bad */\r\n.selector-1 {\r\n  color: #AAAAAA;\r\n  margin: 0px;\r\n} \r\n```\r\n\r\n<a name=\"css-order\"></a>\r\n### 3.2. CSS Declaration Order\r\n\r\nThe declarations should be added in alphabetical order.\r\n\r\n```css\r\n/* Good */\r\n.selector-1 {\r\n  background: #fff;\r\n  border: #333 solid 1px;\r\n  color: #333;\r\n  display: block;\r\n  height: 200px;\r\n  margin: 5px;\r\n  padding: 5px; \r\n  width: 200px;\r\n}\r\n \r\n/* Bad */\r\n.selector-1 {\r\n  padding: 5px; \r\n  height: 200px;\r\n  background: #fff;\r\n  margin: 5px;\r\n  width: 200px;\r\n  color: #333;\r\n  border: #333 solid 1px;\r\n  display: block;\r\n} \r\n```\r\n\r\n<a name=\"css-class-name\"></a>\r\n### 3.3. CSS Class Name\r\n\r\nKeep classes lowercase and use dashes.\r\n\r\n```css\r\n/* Good */\r\n.nav-item { ... }\r\n \r\n/* Bad */\r\n.NavItem { ... }\r\n.nav_item { ... }\r\n```\r\n\r\nDashes serve as natural breaks in related class. Prefix classes based on the closest parent or base class.\r\n\r\n```css\r\n/* Good */\r\n.navbar { ... }\r\n.nav { ... }\r\n.nav-item { ... }\r\n.nav-link { ... }\r\n \r\n/* Bad */  \r\n.item-nav { ... }\r\n.link-nav { ... }\r\n```\r\n\r\nAvoid giving too short names for class and always choose meaningful names that provide the class function.\r\n\r\n```css\r\n/* Good */\r\n.btn { ... }\r\n.page-header { ... }\r\n.progress-bar { ... }\r\n \r\n/* Bad */  \r\n.s { ... }\r\n.ph { ... }\r\n.block { ... }\r\n```\r\n\r\n<a name=\"css-performance\"></a>\r\n### 3.4. CSS Performance\r\n\r\nNever use IDs.\r\n\r\n```css\r\n/* Good */\r\n.header { ... }\r\n.section { ... }\r\n \r\n/* Bad */  \r\n#header { ... }\r\n#section { ... }\r\n```\r\n\r\nDo not use selectors standards for not generic rules, always preferably for class.\r\n\r\n```css\r\n/* Good */\r\n.form-control { ... }\r\n.header { ... }\r\n.section { ... }\r\n \r\n/* Bad */  \r\ninput[type=\"text\"] { ... }\r\nheader\r\nsection\r\n```\r\n\r\nAvoid nesting elements, the preference is always to use classes.\r\n\r\n```css\r\n/* Good */\r\n.navbar { ... }\r\n.nav { ... }\r\n.nav-item { ... }\r\n.nav-link { ... }\r\n\r\n/* Bad */\r\n.navbar ul { ... }\r\n.navbar ul li { ... }\r\n.navbar ul li a { ... }\r\n```\r\n\r\nNest only when need change the class comportament with interference for other class. Keep the nested on max of three elements.\r\n\r\n```css\r\n/* Good */\r\n.modal-footer .btn { ... }\r\n.progress.active .progress-bar { ... }\r\n\r\n/* Bad */\r\n.modal-btn { ... }\r\n.progress.active .progress-bar .progress-item span { ... }\r\n```\r\n\r\n<a name=\"mobile-first-and-media-queries\"></a>\r\n### 3.5 Mobile First and Media Queries\r\n\r\nStart the development with generic rules with and add media queries with mobile first.\r\n\r\n```css\r\n/* Good */\r\n.navbar {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n@media (min-width: 480px) {\r\n  .navbar {\r\n    padding: 10px;\r\n  }\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .navbar {\r\n    position: absolute; \r\n    top: 0; \r\n    left: 0; \r\n  }\r\n}\r\n\r\n@media (min-width: 992px) {\r\n  .navbar {\r\n    position: fixed; \r\n  }\r\n}\r\n\r\n/* Bad */\r\n.navbar {\r\n  position: fixed;\r\n  top: 0; \r\n  left: 0;\r\n}\r\n\r\n@media (max-width: 767px) {\r\n  .navbar {\r\n    position: static; \r\n    padding: 10px;\r\n  }\r\n}\r\n\r\n```\r\n\r\nKeep the media queries as close to their relevant rule sets whenever possible. Don't bundle them all in a separate stylesheet or at the end of the document. \r\n\r\n```css\r\n.navbar { ... }\r\n.nav { ... }\r\n.nav-item { ... }\r\n\r\n@media (min-width: 480px) {\r\n  .navbar { ... }\r\n  .nav { ... }\r\n  .nav-item { ... }\r\n}\r\n```\r\n \r\n<a name=\"css-pre-processors\"></a>\r\n### 3.6. Pre-Processors\r\n\r\nI use pre-processors in all projects. Today I use `LESS`.\r\n\r\nWarning with nesting rules of pre-processors. Continue keep without nesting.\r\n\r\n```css\r\n/* Good */\r\n.nav-item { ... }\r\n\r\n/* Bad */\r\n.navbar { \r\n  .nav { \r\n    .nav-item { \r\n      ... \r\n    }\r\n  }\r\n} \r\n```\r\n\r\nProvide generic names with variables.\r\n\r\n```css\r\n/* Good */\r\n@brand-primary: #049cdb;\r\n\r\n/* Bad */\r\n@color-blue: #049cdb;\r\n```\r\n\r\n<a name=\"css-comments\"></a>\r\n### 3.7. CSS Comments\r\n\r\nAll comments must be made using the syntax of the preprocessor in use.\r\n\r\n```js\r\n//\r\n// Section\r\n// --------------------------------------------------\r\n\r\n// Sub-section\r\n// --------------------------------------------------\r\n\r\n//\r\n// Commentary block\r\n// \r\n//\r\n\r\n// Commentary\r\n```\r\n\r\n<a name=\"js\"></a>\r\n## 4. Javascript\r\n \r\n<a name=\"references\"></a>\r\n## 5. References\r\n\r\n* [Code Guide by @mdo](https://github.com/mdo/code-guide)\r\n* [idiomatic CSS](https://github.com/necolas/idiomatic-css/)\r\n* [idiomatic.js](https://github.com/rwldrn/idiomatic.js/)\r\n* [Zeno Rocha Coding Style](https://github.com/zenorocha/my-coding-style/) \r\n\r\n<a name=\"license\"></a>\r\n## 6. License\r\n \r\n[MIT License](http://felipefialho.mit-license.org/) © Luiz Felipe Tartarotti Fialho\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}